CREATE PROCEDURE InsertSuppliersFromXml
    @FilePath NVARCHAR(255)  -- Параметр для пути к файлу XML
AS
BEGIN
    -- Логирование начала загрузки
    PRINT 'Загрузка данных начата...'

    BEGIN TRY
        DECLARE @xmlData XML;
        DECLARE @sql NVARCHAR(MAX);

        -- Формируем динамический SQL для чтения файла
        SET @sql = N'SELECT @xmlData = BulkColumn
                    FROM OPENROWSET(BULK ''' + @FilePath + ''', SINGLE_BLOB) AS FileContent;';

        -- Выполняем динамический SQL
        EXEC sp_executesql @sql, N'@xmlData XML OUTPUT', @xmlData OUTPUT;

        -- Вставка данных в таблицу Suppliers
        INSERT INTO dbo.Suppliers (
            id,
            external_id,
            type_id,
            created_date,
            last_update_date,
            created_by,
            last_update_by,
            name,
            legal_name,
            inn,
            kpp,
            address,
            phone,
            email,
            www,
            attribute1,
            attribute2,
            attribute3,
            attribute4,
            attribute5,
            attribute6,
            attribute7,
            attribute8,
            attribute9,
            attribute10,
            attribute11,
            attribute12,
            attribute13,
            attribute14,
            attribute15,
            code,
            OKPO,
            OKONH,
            corraccount,
            bankaccount,
            BIK,
            bank_name,
            status,
            delivaddress,
            price_coef,
            pricelist_life_length,
            type_name
        )
        SELECT 
            items.value('(id)[1]', 'NVARCHAR(255)'),
            items.value('(external_id)[1]', 'NVARCHAR(255)'),
            items.value('(type_id)[1]', 'NVARCHAR(255)'),
            TRY_CONVERT(DATETIME, items.value('(created_date)[1]', 'NVARCHAR(30)'), 120),
            TRY_CONVERT(DATETIME, items.value('(last_update_date)[1]', 'NVARCHAR(30)'), 120),
            items.value('(created_by)[1]', 'NVARCHAR(255)'),
            items.value('(last_update_by)[1]', 'NVARCHAR(255)'),
            items.value('(name)[1]', 'NVARCHAR(255)'),
            items.value('(legal_name)[1]', 'NVARCHAR(255)'),
            items.value('(inn)[1]', 'NVARCHAR(255)'),
            items.value('(kpp)[1]', 'NVARCHAR(255)'),
            items.value('(address)[1]', 'NVARCHAR(255)'),
            items.value('(phone)[1]', 'NVARCHAR(255)'),
            items.value('(email)[1]', 'NVARCHAR(255)'),
            items.value('(www)[1]', 'NVARCHAR(255)'),
            items.value('(attribute1)[1]', 'NVARCHAR(255)'),
            items.value('(attribute2)[1]', 'NVARCHAR(255)'),
            items.value('(attribute3)[1]', 'NVARCHAR(255)'),
            items.value('(attribute4)[1]', 'NVARCHAR(255)'),
            items.value('(attribute5)[1]', 'NVARCHAR(255)'),
            items.value('(attribute6)[1]', 'NVARCHAR(255)'),
            items.value('(attribute7)[1]', 'NVARCHAR(255)'),
            items.value('(attribute8)[1]', 'NVARCHAR(255)'),
            items.value('(attribute9)[1]', 'NVARCHAR(255)'),
            items.value('(attribute10)[1]', 'NVARCHAR(255)'),
            items.value('(attribute11)[1]', 'NVARCHAR(255)'),
            items.value('(attribute12)[1]', 'NVARCHAR(255)'),
            items.value('(attribute13)[1]', 'NVARCHAR(255)'),
            items.value('(attribute14)[1]', 'NVARCHAR(255)'),
            items.value('(attribute15)[1]', 'NVARCHAR(255)'),
            items.value('(code)[1]', 'NVARCHAR(255)'),
            items.value('(OKPO)[1]', 'NVARCHAR(255)'),
            items.value('(OKONH)[1]', 'NVARCHAR(255)'),
            items.value('(corraccount)[1]', 'NVARCHAR(255)'),
            items.value('(bankaccount)[1]', 'NVARCHAR(255)'),
            items.value('(BIK)[1]', 'NVARCHAR(255)'),
            items.value('(bank_name)[1]', 'NVARCHAR(255)'),
            items.value('(status)[1]', 'NVARCHAR(255)'),
            items.value('(delivaddress)[1]', 'NVARCHAR(255)'),
            TRY_CAST(items.value('(price_coef)[1]', 'NVARCHAR(255)') AS DECIMAL(20, 10)), 
            TRY_CAST(items.value('(pricelist_life_length)[1]', 'NVARCHAR(255)') AS TINYINT),
            items.value('(type_name)[1]', 'NVARCHAR(255)')
        FROM @xmlData.nodes('/root/suppliers/supplier') AS XMLData(items);

        -- Логирование успешной загрузки
        PRINT 'Данные успешно загружены.';
    END TRY
    BEGIN CATCH
        -- Логирование ошибки
        PRINT 'Произошла ошибка при загрузке данных:';
        PRINT 'Сообщение об ошибке: ' + ERROR_MESSAGE();
        PRINT 'Номер ошибки: ' + CAST(ERROR_NUMBER() AS NVARCHAR(10));
        PRINT 'Серьезность ошибки: ' + CAST(ERROR_SEVERITY() AS NVARCHAR(10));
        PRINT 'Состояние ошибки: ' + CAST(ERROR_STATE() AS NVARCHAR(10));
        PRINT 'Ошибка на строке: ' + CAST(ERROR_LINE() AS NVARCHAR(10));
        PRINT 'Ошибка в процедуре: ' + ERROR_PROCEDURE();
    END CATCH
END;